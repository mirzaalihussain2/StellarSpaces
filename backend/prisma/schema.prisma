// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // flat data fields
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  DOB       DateTime

  // datetime boilerplate
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // relations TO other tables
  listings      Listing[]
  favourites    Favourites[]
  landlordChats Chat[]       @relation("LandlordChats")
  tenantChats   Chat[]       @relation("TenantChats")
  messages      Message[]

  // relations FROM other tables
}

model Listing {
  // flat data fields
  id             Int     @id @default(autoincrement())
  title          String
  description    String  @default("")
  video          String
  price          Int
  numOfBedrooms  Int
  numOfBathrooms Int
  petsAllowed    Boolean @default(false)
  hasGarage      Boolean @default(false)
  status         String // define types & add type-safety (live, dormant, letAgreed)

  // address as flat data fields
  addressApartmentFloorNum Int?
  addressHouseNum          Int
  addressStreetName        String
  addressPostCode          String
  addressCity              String
  addressCounty            String
  addressLongitude         Float?
  addressLatitude          Float?

  // datetime boilerplate
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // relations TO other tables
  favourites Favourites[]
  chats      Chat[]
  images     Image[]

  // relations FROM other tables
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Image {
  // flat data fields
  id  Int    @id @default(autoincrement())
  url String

  // datetime boilerplate
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // relations TO other tables

  // relations FROM other tables
  listing   Listing @relation(fields: [listingId], references: [id])
  listingId Int
}

model Favourites {
  // datetime boilerplate
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  // relations TO other tables

  // relations FROM other tables
  user   User @relation(fields: [userId], references: [id])
  userId Int

  listing   Listing @relation(fields: [listingId], references: [id])
  listingId Int

  // flat data fields
  @@id([userId, listingId])
}

model Chat {
  // flat data fields
  id Int @id @default(autoincrement())

  // datetime boilerplate
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt // should this be the datetime of the latest msg in chat?
  deletedAt DateTime?

  // relations TO other tables
  messages Message[]

  // relations FROM other tables
  listing   Listing @relation(fields: [listingId], references: [id])
  listingId Int

  landlord   User @relation("LandlordChats", fields: [landlordId], references: [id])
  landlordId Int

  tenant   User @relation("TenantChats", fields: [tenantId], references: [id])
  tenantId Int
}

model Message {
  // flat data fields
  id      Int    @id @default(autoincrement())
  content String

  // datetime boilerplate
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  // relations TO other tables

  // relations FROM other tables
  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int

  author   User @relation(fields: [authorId], references: [id])
  authorId Int
}
